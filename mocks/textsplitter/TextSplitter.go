
// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	document "github.com/wejick/gchain/document"
)

// TextSplitter is an autogenerated mock type for the TextSplitter type
type TextSplitter struct {
	mock.Mock
}

// Len provides a mock function with given fields: input
func (_m *TextSplitter) Len(input string) int {
	ret := _m.Called(input)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SplitDocument provides a mock function with given fields: input, maxChunkSize, overlap
func (_m *TextSplitter) SplitDocument(input document.Document, maxChunkSize int, overlap int) []document.Document {
	ret := _m.Called(input, maxChunkSize, overlap)

	var r0 []document.Document
	if rf, ok := ret.Get(0).(func(document.Document, int, int) []document.Document); ok {
		r0 = rf(input, maxChunkSize, overlap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]document.Document)
		}
	}

	return r0
}

// SplitText provides a mock function with given fields: input, maxChunkSize, overlap
func (_m *TextSplitter) SplitText(input string, maxChunkSize int, overlap int) []string {
	ret := _m.Called(input, maxChunkSize, overlap)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, int, int) []string); ok {
		r0 = rf(input, maxChunkSize, overlap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NewTextSplitter creates a new instance of TextSplitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTextSplitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TextSplitter {
	mock := &TextSplitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}